"""
User tracking module for limiting usage of the Google Form Filler.
"""

import json
import time
import os
import hashlib
from datetime import datetime, timedelta
from config import MAX_RESPONSES_PER_USER, USER_DB_PATH, USAGE_LOG_PATH

class UserTracker:
    def __init__(self):
        self.user_db_path = USER_DB_PATH
        self.usage_log_path = USAGE_LOG_PATH
        self._load_database()
    
    def _load_database(self):
        """Load the user database from file or create if it doesn't exist"""
        try:
            if os.path.exists(self.user_db_path):
                with open(self.user_db_path, 'r') as f:
                    self.users = json.load(f)
            else:
                self.users = {}
                self._save_database()
                
            if os.path.exists(self.usage_log_path):
                with open(self.usage_log_path, 'r') as f:
                    self.usage_log = json.load(f)
            else:
                self.usage_log = []
                self._save_usage_log()
                
        except Exception as e:
            print(f"Error loading user database: {e}")
            self.users = {}
            self.usage_log = []
    
    def _save_database(self):
        """Save the user database to file"""
        try:
            with open(self.user_db_path, 'w') as f:
                json.dump(self.users, f, indent=2)
        except Exception as e:
            print(f"Error saving user database: {e}")
    
    def _save_usage_log(self):
        """Save the usage log to file"""
        try:
            with open(self.usage_log_path, 'w') as f:
                json.dump(self.usage_log, f, indent=2)
        except Exception as e:
            print(f"Error saving usage log: {e}")
    
    def _get_user_id(self, ip_address, user_agent=None):
        """Generate a consistent user ID from IP and optional user agent"""
        # Create a deterministic but anonymized ID
        input_string = f"{ip_address}:{user_agent or ''}"
        return hashlib.md5(input_string.encode()).hexdigest()
    
    def _get_daily_usage(self, user_id):
        """Get the number of responses generated by a user in the last 24 hours"""
        if user_id not in self.users:
            return 0
        
        now = datetime.now()
        yesterday = now - timedelta(days=1)
        yesterday_ts = yesterday.timestamp()
        
        # Count submissions in the last 24 hours
        daily_usage = sum(1 for usage in self.users[user_id]["usage"] 
                         if usage["timestamp"] > yesterday_ts)
        return daily_usage
    
    def can_generate_responses(self, ip_address, user_agent=None):
        """Check if a user can generate more responses"""
        user_id = self._get_user_id(ip_address, user_agent)
        
        # Initialize user record if not exists
        if user_id not in self.users:
            self.users[user_id] = {
                "first_seen": datetime.now().timestamp(),
                "usage": []
            }
            self._save_database()
            return True
        
        # Check daily usage limit
        daily_usage = self._get_daily_usage(user_id)
        return daily_usage < MAX_RESPONSES_PER_USER
    
    def record_usage(self, ip_address, user_agent, form_url, num_responses, success_count):
        """Record usage after form submission"""
        user_id = self._get_user_id(ip_address, user_agent)
        timestamp = datetime.now().timestamp()
        
        # Initialize user if not exists
        if user_id not in self.users:
            self.users[user_id] = {
                "first_seen": timestamp,
                "usage": []
            }
        
        # Add usage record
        usage_record = {
            "timestamp": timestamp,
            "form_url": form_url,
            "responses_requested": num_responses,
            "responses_successful": success_count
        }
        
        self.users[user_id]["usage"].append(usage_record)
        
        # Add to global usage log (anonymized)
        log_entry = {
            "timestamp": timestamp,
            "user_id_hash": user_id[:8],  # Only store first 8 chars for privacy
            "form_url_hash": hashlib.md5(form_url.encode()).hexdigest()[:8],
            "responses_requested": num_responses,
            "responses_successful": success_count
        }
        self.usage_log.append(log_entry)
        
        # Save changes
        self._save_database()
        self._save_usage_log()
    
    def get_remaining_submissions(self, ip_address, user_agent=None):
        """Get number of remaining submissions allowed for a user today"""
        user_id = self._get_user_id(ip_address, user_agent)
        daily_usage = self._get_daily_usage(user_id)
        return max(0, MAX_RESPONSES_PER_USER - daily_usage)
